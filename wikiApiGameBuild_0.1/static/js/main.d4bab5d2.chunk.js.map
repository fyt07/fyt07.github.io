{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","container","width","backgroundColor","paddingLeft","paddingRight","position","left","transform","itemContainer","paddingBottom","item","color","textDecoration","itemGreen","itemRed","headerText","display","logo","top","right","padding","App","state","list","step","win","title","loading","imageLoading","description","imgUrl","onClick","e","text","target","_this","preventDefault","setState","getData","checkWin","this","getRandomPage","_this2","fetch","then","response","json","itm","currentItem","query","random","find","i","ns","catch","err","console","error","link","_this3","concat","parseData","pages","Object","keys","getImageName","_this4","imgName","images","getImageUrl","log","name","_this5","imageinfo","url","isNaN","indexOf","_this$state","react_default","a","createElement","style","headerContainer","src","alt","_this6","links","linksList","filter","getCurrentLink","map","qwe","key","href","_this7","_this$state2","renderHeader","renderLoading","renderContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4bab5d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst styles = {\n  container: {\n    width: 400,\n    backgroundColor: 'rgb(248,248,248)',\n    paddingLeft: 15,\n    paddingRight: 15,\n    position: 'absolute',\n    left: '50%',\n    transform: 'translate(-50%)',\n  },\n  itemContainer: {\n    paddingBottom: 15\n  },\n  item: {\n    color: 'rgb(19,31,49)',\n    textDecoration: 'none',\n  },\n  itemGreen: {\n    color: 'rgb(0,200,114)',\n    textDecoration: 'none',\n  },\n  itemRed: {\n    color: 'rgb(254,56,36)',\n    textDecoration: 'none',\n  },\n  headerText: {\n    display: 'inline-block',\n    width: '80%',\n  },\n  logo: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    padding: 10,\n    width: '20%',\n  }\n\n}\nclass App extends Component {\n  state = {\n    list: null,\n    step: 0,\n    win: false,\n    title: null,\n    loading: false,\n    imageLoading: false,\n    description: '',\n    imgUrl: '',\n  }\n  componentDidMount() {\n    this.setState({ loading: true })\n    this.getRandomPage()\n  }\n  getRandomPage() {\n    this.setState({ loading: true })\n    fetch(`https://ru.wikipedia.org/w/api.php?action=query&list=random&rnlimit=5&format=json`)\n      .then(response => response.json())\n      .then(itm => {\n        const currentItem = itm.query.random.find(i => i.ns === 0 && i.title !== '')\n        currentItem ? this.getData(currentItem.title) : this.getRandomPage()\n        this.setState({ title: currentItem.title })\n      })\n      .catch(err => { this.getRandomPage(); console.error(err) })\n  }\n\n  getData(link) {\n    this.setState({ loading: true })\n    fetch(`https://ru.wikipedia.org/w/api.php?action=query&pllimit=max&titles=${link}&prop=links&&format=json`)\n      .then(response => response.json())\n      .then(item => this.parseData(item))\n      .catch(err => console.error(err))\n\n    fetch(`https://ru.wikipedia.org/w/api.php?action=query&titles=${link}&prop=description&&format=json`)\n      .then(response => response.json())\n      .then(item => {\n        const description = item.query.pages[Object.keys(item.query.pages)].description\n        this.setState({ loading: false, description: description });\n      })\n      .catch(err => console.error(err))\n    this.getImageName(link)\n  }\n  getImageName(link) {\n    this.setState({ imageLoading: true })\n    fetch(`https://ru.wikipedia.org/w/api.php?action=query&titles=${link}&prop=images&&format=json`)\n      .then(response => response.json())\n      .then(item => {\n        const imgName = item.query.pages[Object.keys(item.query.pages)].images[0].title\n        imgName ? this.getImageUrl(imgName) : this.setState({ imgUrl: null, imageLoading: false })\n      })\n      .catch(err => { this.setState({ imgUrl: null, imageLoading: false }); console.log(err) })\n  }\n  getImageUrl(name) {\n    fetch(`https://ru.wikipedia.org/w/api.php?action=query&titles=${name}&iiprop=url&prop=imageinfo&&format=json`)\n      .then(response => response.json())\n      .then(item => {\n        const imgUrl = item.query.pages[Object.keys(item.query.pages)].imageinfo[0].url\n        this.setState({ imgUrl, imageLoading: false });\n      })\n      .catch(err => console.error(err))\n  }\n  getCurrentLink(i) {\n    if (isNaN(+i.title[0])\n      && i.title[0] !== '.'\n      && i.title.indexOf('Категория') === -1\n      && i.title.indexOf('Википедия') === -1\n      && i.title.indexOf('Шаблон') === -1\n      && i.title.indexOf('Проект') === -1\n      && i.title.indexOf('Модуль') === -1\n      && i.title.indexOf('Файл') === -1\n      && i.title.indexOf('Участник') === -1\n    ) {\n      return true\n    }\n    return false\n  }\n  renderHeader() {\n    const { description, loading, imageLoading, title, imgUrl } = this.state\n    return (\n      <div style={styles.headerContainer}>\n        <div style={styles.headerText}>\n          <h2>{!loading && title}</h2>\n          <h4>{description}</h4>\n        </div>\n        {imgUrl && !imageLoading && <img style={styles.logo} src={imgUrl} alt={title}></img>}\n      </div>\n    )\n  }\n  parseData(item) {\n    const links = item.query.pages[Object.keys(item.query.pages)].links\n    const linksList = links ? links.filter(i => this.getCurrentLink(i)).map((i, qwe) => {\n      return (\n        <div key={qwe} style={styles.itemContainer}>\n          <a href='foo' onClick={this.onClick} key={qwe} style={styles.item}>{i.title}</a>\n        </div>\n      )\n    }) : null\n\n    this.setState({ list: linksList || null })\n  }\n\n  checkWin(name) {\n    const adg = ['Гитлер, Адольф', 'Адольф Гитлер', 'Гитлер']\n    const win = adg.find(i => i === name)\n    return win\n  }\n\n  onClick = (e) => {\n    const { text } = e.target\n    const { step } = this.state\n\n    e.preventDefault()\n    this.setState({ title: text, step: step + 1 })\n    this.getData(text)\n    if (this.checkWin(text)) {\n      return this.setState({ win: true })\n    }\n  }\n\n  renderContent() {\n    const { step, win, list } = this.state\n\n    if (win) {\n      return (\n        <div style={styles.itemContainer}>\n          <a\n            href='foo'\n            onClick={e => {\n              e.preventDefault()\n              this.setState({ loading: true, win: false })\n              this.getRandomPage()\n            }\n            }\n            style={styles.itemGreen}\n          >\n            {`win! ${step} step!  go next`}\n          </a>\n        </div>\n      )\n    }\n\n    if (list !== null) return list\n\n    return (\n      <div style={styles.itemContainer}>\n        <a\n          href='foo'\n          onClick={e => {\n            e.preventDefault()\n            this.setState({ loading: true, win: false })\n            this.getRandomPage()\n          }\n          }\n          style={styles.itemRed}\n        >\n          {`lose! ${step} step!  go next`}\n        </a>\n      </div>\n    )\n  }\n  renderLoading() {\n    return <p>wait..</p>\n  }\n\n  render() {\n    const { loading } = this.state\n    return (\n      <div style={styles.container}>\n        {!loading && this.renderHeader()}\n        {loading ? this.renderLoading() : this.renderContent()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}